swagger: '2.0'
info:
  title: Aptly API
  description: The swiss army knife for Debian repository management
  version: "0.9.7"
# the domain of the service
host: localhost:8080
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /api
produces:
  - application/json
paths:

# MISC OPERATIONS API
  /version:
    get:
      summary: Return current aptly version.
      responses:
        200:
          description: The current aptly version.
          schema:
            $ref: '#/definitions/Version'

# LOCAL REPOS API
  /repos:
    get:
      summary: Show list of currently available local repositories.
      responses:
        200:
          description: List of currently available repositories
          schema:
            type: array
            items:
              $ref: '#/definitions/Repository'
    post:
      summary: Create empty local repository with specified parameters.
      parameters:
        - name: repo
          in: body
          description: asdf
          required: true
          schema:
            $ref: '#/definitions/Repository'
      responses:
        200:
          description: success
        400:
          description: repository with such name already exists

  /repos/{name}:
    get:
      summary: Returns basic information about local repository.
      parameters:
        - name: name
          in: path
          required: true
          type: string

      responses:
        200:
          description: Repository
          schema:
            $ref: '#/definitions/Repository'
        404:
          description: repository with such name doesn’t exist
    put:
      summary: Update local repository meta information.
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: repo
          in: body
          required: true
          schema:
            $ref: '#/definitions/RepositoryUpdate'
      responses:
        200:
          description: Repository
          schema:
            $ref: '#/definitions/Repository'
        404:
          description: repository with such name doesn’t exist
    delete:
      summary: Delete local repository.
      description: |
        Local repository can’t be deleted if it is published.
        If local repository has snapshots, aptly would refuse
        to delete it by default, but that can be overridden
        with force flag.
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: force
          in: query
          required: false
          type: integer
          enum: [0, 1]
      responses:
        404:
          description: repository with such name doesn’t exist
        409:
          description: 	repository can’t be dropped (reason in the message)

  /repos/{name}/packages:
    get:
      summary: List all packages in local repository or perform search on repository contents and return result.
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: q
          description: "package query, if missing - return all packages"
          in: query
          required: false
          type: string
        - name: withDeps
          description: "set to 1 to include dependencies when evaluating package query"
          in: query
          required: false
          type: integer
          enum: [0, 1]
        - name: format
          description: "result format, compact by default (only package keys), details to return full information about each package (might be slow on large repos)"
          in: query
          require: false
          type: string
          enum: ["compact", "details"]
      responses:
        404:
          description: repository with such name doesn’t exist

  /repos/{name}/file/{dir}:
    post:
      summary: Import packages from files to the local repository
      description: |
        Import packages from files (uploaded using File Upload API)
        to the local repository. If directory specified, aptly would
        discover package files automatically.

        Adding same package to local repository is not an error.

        By default aptly would try to remove every successfully
        processed file and directory :dir (if it becomes empty after
        import).
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: dir
          in: path
          required: true
          type: string
        - name: noRemove
          description: 	when value is set to 1, don’t remove any files
          in: query
          required: false
          type: integer
          enum: [0, 1]
        - name: forceReplace
          description: when value is set to 1, remove packages conflicting with package being added (in local repository)
          in: query
          required: false
          type: integer
          enum: [0, 1]
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/ImportResult'
        404:
          description: repository with such name doesn’t exist

  /repos/{name}/file/{dir}/{file}:
    post:
      summary: Import packages from files to the local repository
      description: |
        Import packages from files (uploaded using File Upload API)
        to the local repository. If directory specified, aptly would
        discover package files automatically.

        Adding same package to local repository is not an error.

        By default aptly would try to remove every successfully
        processed file and directory :dir (if it becomes empty after
        import).
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: dir
          in: path
          required: true
          type: string
        - name: file
          in: path
          required: true
          type: string
        - name: noRemove
          description: 	when value is set to 1, don’t remove any files
          in: query
          required: false
          type: integer
          enum: [0, 1]
        - name: forceReplace
          description: when value is set to 1, remove packages conflicting with package being added (in local repository)
          in: query
          required: false
          type: integer
          enum: [0, 1]
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/ImportResult'
        404:
          description: repository with such name doesn’t exist

# ADD PACKAGES BY KEY
# POST /api/repos/:name/packages
# DELETE /api/repos/:name/packages

# FILE UPLOAD API
  /files:
    get:
      summary: List all directories.
      responses:
        200:
          description:list of directory names.

  /files/{dir}:
    get:
      summary: Returns list of files in directory.
      parameters:
        - name: dir
          description: directory name
          in: path
          required: true
          type: string
      responses:
        200:
          description: list of filenames.
          schema:
            type: array
            items:
              type: string
        404:
          description: directory not found

    post:
      # Unavailable in editor due to this bug: https://github.com/swagger-api/swagger-editor/issues/599#issuecomment-266354589
      summary: Parameter {dir} is upload directory name. Directory would be created if it doesn’t exist.
      description: |
        Any number of files can be uploaded in one call,
        aptly would preserve filenames. No check is performed
        if existing uploaded would be overwritten.
      consumes:
        - multipart/form-data
      parameters:
        - name: dir
          description: directory name
          in: path
          required: true
          type: string
        - name: file
          description: file to upload
          in: formData
          required: true
          type: file
      responses:
        200:
          description: success

    delete:
      summary: Deletes all files in upload directory and directory itself.
      parameters:
        - name: dir
          description: directory name
          in: path
          required: true
          type: string
      responses:
        200:
          description: success

  /files/{dir}/{file}:
    delete:
      summary: Delete single file in directory.
      parameters:
        - name: dir
          description: directory name
          in: path
          required: true
          type: string
        - name: file
          description: file name
          in: path
          required: true
          type: string
      responses:
        200:
          description: success

  /packages/{key}:
    get:
      summary: "Show information about package by package key."
      parameters:
        - name: key
          description: "package key (unique package identifier)"
          in: path
          required: true
          type: string
      responses:
        200:
          description: success
        404:
          description: package with such key doesn’t exist

# SNAPSHOT API
# GET /api/snapshots
# POST /api/repos/:name/snapshots
# POST /api/snapshots
# PUT /api/snapshots/:name
# GET /api/snapshots/:name
# DELETE /api/snapshots/:name
# GET /api/snapshots/:name/packages
# GET /api/snapshots/:name/diff/:withSnapshot

# PUBLISH API
# GET /api/publish
# POST /api/publish/:prefix
# PUT /api/publish/:prefix/:distribution
# DELETE /api/publish/:prefix/:distribution

definitions:
  Version:
    type: object
    properties:
      Version:
        type: string
  Repository:
    type: object
    properties:
      Name:
        description: local repository name
        # concider readOnly: true
        type: string

      Comment:
        description: text describing local repository, for the user
        type: string

      DefaultDistribution:
        description: default distribution when publishing from this local repo
        type: string

      DefaultComponent:
        description: default component when publishing from this local repo
        type: string

  RepositoryUpdate:
    type: object
    properties:
        Comment:
          description: text describing local repository, for the user
          type: string

        DefaultDistribution:
          description: default distribution when publishing from this local repo
          type: string

        DefaultComponent:
          description: default component when publishing from this local repo
          type: string

  ImportResult:
    type: object
    properties:
      FailedFiles:
        description: list of files that failed to be processed
        type: array
        items:
          type: string
      Report:
        description: operation report
        $ref: '#/definitions/ImportOperationReport'

  ImportOperationReport:
    type: object
    properties:
      Warnings:
        description: list of warnings
        type: array
        items:
          type: string
      Added:
        description: list of messages related to packages being added
        type: array
        items:
          type: string
      Deleted:
        description: 	list of messages related to packages being deleted
        type: array
        items:
          type: string
